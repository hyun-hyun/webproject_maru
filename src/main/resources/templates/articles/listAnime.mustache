{{>layouts/header}}
<div class="container">
    <br>
    <h2>📚작품 목록</h2>
    <br>
    <hr>
    <div class="sort-buttons">
        <button onclick="sortArticles('id')" class="btn btn-primary">등록일자 <span id="idSortIcon">▼</span></button>
        <button onclick="sortArticles('broaddate')" class="btn btn-primary">방영일자 <span id="broadDateSortIcon"></span></button>
        <button onclick="sortArticles('avgscore')" class="btn btn-primary">평점 <span id="avgScoreSortIcon"></span></button>
        <button onclick="sortArticles('cscore')" class="btn btn-primary">리뷰수 <span id="cscoreSortIcon"></span></button>
    </div>

    <div class="article-list" id="article-list">
        <!-- 내용 -->
    </div>
    <!-- 로딩 인디케이터 -->
    <div id="loading" class="loading-container" style="display: none;">
        <div class="spinner"></div>
        <p>데이터를 불러오는 중...</p>
    </div>
</div>

{{>layouts/footer}}

<script>
    let currentSort = new URLSearchParams(window.location.search).get('sort') || 'id';
    let direction = new URLSearchParams(window.location.search).get('direction') || 'desc';
    let currentPage = parseInt(new URLSearchParams(window.location.search).get('page')) || 0;
    let loading = false;
    let hasMoreData = true;

    // URL 상태 업데이트
    function updateURLState() {
        const params = new URLSearchParams();
        params.set('sort', currentSort);
        params.set('direction', direction);
        params.set('page', currentPage);
        history.replaceState(null, '', `?${params.toString()}`);
    }

    // 정렬 변경
    function sortArticles(sortBy) {
        if (currentSort === sortBy) {
            direction = direction === 'desc' ? 'asc' : 'desc';
        } else {
            currentSort = sortBy;
            direction = 'desc';
        }
        currentPage = 0; // 정렬 변경 시 페이지 초기화
        hasMoreData = true;
        loading = false;
        updateSortIcons();
        document.querySelector("#article-list").innerHTML = ""; // 기존 데이터 초기화
        loadArticles(currentPage, currentSort, direction); // 새로 로드
        updateURLState();
    }

    // 정렬 아이콘 업데이트
    function updateSortIcons() {
        const icons = {
            id: document.getElementById('idSortIcon'),
            broaddate: document.getElementById('broadDateSortIcon'),
            avgscore: document.getElementById('avgScoreSortIcon'),
            cscore: document.getElementById('cscoreSortIcon'),
        };
        Object.keys(icons).forEach(key => (icons[key].textContent = ''));
        icons[currentSort].textContent = direction === 'desc' ? '▼' : '▲';
    }

    // 작품 로드
    // 작품 로드 (비동기 작업 완료 후 스크롤 복구)
    async function loadArticles(page, sort = 'id', direction = 'desc') {
        if (loading || !hasMoreData) return;
        loading = true;
        document.getElementById('loading').style.display = 'block';

        const url = `/api/articles/list?page=${page}&sort=${sort}&direction=${direction}`;
        try {
            const response = await fetch(url);
            const articles = await response.json();
            const articleListContainer = document.getElementById('article-list');
            
            if (articles.length === 0) {
                hasMoreData = false;
                document.getElementById('loading').style.display = 'none';
                return;
            }

            // 아티클을 로드한 후 표시
            articles.forEach(article => {
                const articleRow = document.createElement('div');
                articleRow.className = 'article-row';
                articleRow.setAttribute('data-article-id', article.id);

                let tagsHtml = '';
                if (article.usedTags && Array.isArray(article.usedTags)) {
                    tagsHtml = article.usedTags
                        .map(tag => `<span class="btn btn-outline-info m-1 tag">${tag}</span>`)
                        .join('');
                }

                articleRow.innerHTML = `
                    <div class="article-content">
                        <img src="/images/pic/anime/${article.main_pic}" width="150" alt="작품표지" class="article-image">
                        <div class="article-info">
                            평점 ${article.avgscore}점 / 리뷰 ${article.cscore}개<br>
                            <b class="title">[${article.genre}] ${article.title}</b>
                            <div class="tags">${tagsHtml}</div>
                            <div class="meta-info">
                                ${article.broaddate} | ${article.author} | ${article.ani_company}
                            </div>
                            <span class="story">${article.story}</span>
                        </div>
                    </div>
                `;
                articleListContainer.appendChild(articleRow);

                // 상세 페이지 이동 시 상태 저장
                articleRow.addEventListener('click', function () {
                    sessionStorage.setItem('scrollPosition', window.scrollY);
                    updateURLState();
                    window.location.href = `/articles/anime/${article.id}`;
                });
            });

            loading = false;
            document.getElementById('loading').style.display = 'none';

            // 모든 아티클 로딩 완료 후 스크롤 복구
            restoreScrollPosition();
        } catch (error) {
            console.error('Error fetching articles:', error);
            loading = false;
            document.getElementById('loading').style.display = 'none';
        }
    }

    // 스크롤 위치 복구
    function restoreScrollPosition() {
        let scrollPosition = sessionStorage.getItem('scrollPosition');
        scrollPosition = parseInt(scrollPosition, 10);

        if (!isNaN(scrollPosition)) {
            window.scrollTo(0, scrollPosition);
            //console.log('스크롤 이동 완료');
        } else {
            //console.log('유효하지 않은 스크롤 위치');
        }

        sessionStorage.removeItem('scrollPosition'); // 복구 후 제거
    }

        // 무한 스크롤
        window.addEventListener('scroll', function () {
            const scrollPosition = window.innerHeight + window.scrollY;
            const documentHeight = document.documentElement.scrollHeight;

            if (scrollPosition >= documentHeight - 500 && hasMoreData && !loading) {
                currentPage++;
                loadArticles(currentPage, currentSort, direction);
                updateURLState();
            }
        });

        document.addEventListener('DOMContentLoaded', async function () {
            // 모든 페이지의 아티클을 비동기적으로 로드
            for (let i = 0; i <= currentPage; i++) {
                await loadArticles(i, currentSort, direction); // 저장된 상태로 목록 로드
            }
            //console.log(currentPage);
            updateSortIcons(); // 정렬 아이콘 업데이트
        
            // 모든 리소스가 로드된 후 스크롤 위치 복구
            window.addEventListener('load', function() {
                restoreScrollPosition(); // 스크롤 위치 복구
            });
        });
        window.addEventListener('popstate', function () {
            restoreScrollPosition(); // 뒤로가기 시 스크롤 복구
        });
</script>


<style>
  /* 로딩 컨테이너 */
  .loading-container {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
      color: #3498db;
      font-family: 'Arial', sans-serif;
      font-size: 16px;
      text-align: center;
  }
  
  /* 스피너 스타일 */
  .spinner {
      border: 4px solid #f3f3f3; /* 배경 색 */
      border-top: 4px solid #3498db; /* 스피너 색 */
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite; /* 스피너 회전 애니메이션 */
  }
  
  /* 회전 애니메이션 */
  @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
  }
  
  /* 텍스트 아래에 간격 추가 */
  #loading p {
      margin-top: 10px;
      font-size: 18px;
      color: #555;
  }

  .article-list {
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    gap: 20px; /* 각 추천 항목 간 간격 */
}

/* 반응형 디자인 */
@media (max-width: 768px) {
    .article-content {
        flex-direction: column; /* 모바일에서는 세로로 쌓이게 */
        align-items: flex-start;
    }

    .article-image {
        margin-right: 0;
        margin-bottom: 15px;
    }
}
</style>