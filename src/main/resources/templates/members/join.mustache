{{>layouts/header}}
<div class="container">
<br>
<h2><div style="text-align:center">회원가입</div></h2>

<form class="px-4 py-3" action="/joinProc" method="post">
    <div class="mb-3">
        <label class="form-label"><b>닉네임</b></label>
        <div class="input-group">
            <input type="text" class="form-control" name="nickname" id="nickname" placeholder="닉네임" required>
            <button type="button" class="btn btn-outline-secondary" id="nicknameCheck">중복확인</button>
        </div>
    </div>
    <div id="nicknameMessage" class="alert" style="display:none;"></div>

    <div class="mb-3">
        <label class="form-label"><b>이메일</b></label><br>
        <p>*가입 시 ID로 활용되고 안내사항이 있을 경우 이 메일주소로 안내됩니다.*</p>
        <div class="input-group">
            <input type="email" class="form-control" name="email" id="email" placeholder="이메일" required>
            <button type="button" class="btn btn-outline-secondary" id="emailCheck">중복확인</button>
            <button type="button" id="emailVerify" class="btn btn-success" style="display:none;">인증</button>
        </div>
    </div>
    <div id="emailMessage" class="alert" style="display:none;"></div>

    <div id="authContainer" style="display: none;">
        <input type="text" id="authCode" name="authCode" placeholder="인증코드" maxlength="6">
        <button type="button" id="confirmAuth" class="btn btn-success">확인</button>
        <span id="authOrNot"></span>
        <span id="timer">05:00</span>
    </div>

    <div class="mb-3">
        <label class="form-label"><b>비밀번호</b></label>
        <input type="password" class="form-control" name="pswd" id="password" placeholder="비밀번호" required>
        <div class="alert alert-danger" id="passwordLengthError" style="display:none;">비밀번호는 최소 5자 이상 입력해주세요.</div>
        <div class="alert alert-danger" id="passwordCharacterError" style="display:none;">영어와 숫자를 섞어서 비밀번호를 만들어주세요.</div>
        
        <input type="password" class="form-control" id="confirmPassword" placeholder="비밀번호 확인" required>
        <div class="alert alert-danger" id="confirmPasswordError" style="display:none;">비밀번호가 일치하지 않습니다.</div>
        <div class="alert alert-success" id="confirmPasswordSuccess" style="display:none;">비밀번호가 일치합니다.</div>
    </div>

    <div class="mb-3">
        <label class="form-label"><b>성별</b></label>
        <div class="gender-container">
          <input type="radio" name="gender" id="male" value="남" required>
          <label class="gender-label" for="male">남성</label>
          
          <input type="radio" name="gender" id="female" value="여" required>
          <label class="gender-label" for="female">여성</label>
          
          <input type="radio" name="gender" id="private" value="무" required>
          <label class="gender-label" for="private">비공개</label>
        </div>
      </div>
    <br>
    <div>
        <b>아래 사항을 확인 후 필수 사항에 동의하여 주시기 바랍니다.</b><br>
        <label for="terms">1. 만 14세 이상입니다.(필수)</label> 
        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" required>
        <br>
        <label for="terms">2. 서비스 이용 약관에 동의합니다.(필수)</label> 
        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" required>
        <div class="terms-container">
          <p id="short-text-1" class="terms-text" onclick="toggleText('short-text-1', 'full-text-1')">
            ⑴ 목적: 본 약관은 사용자(이하 '회원')가 사이트(이하 '서비스')를 이용함에 있어 회사와 회원 간의 권리, 의무 및 책임사항을 규정함을 목적으로 합니다...  [자세히보기]
          </p>
          <p id="full-text-1" class="terms-text" style="display: none;" onclick="toggleText('short-text-1', 'full-text-1')">
            ⑴ 목적: 본 약관은 사용자(이하 '회원')가 사이트(이하 '서비스')를 이용함에 있어 회사와 회원 간의 권리, 의무 및 책임사항을 규정함을 목적으로 합니다.<br>
            ⑵ 이용계약 체결:<br>
            - 회원가입 시 제공된 정보는 사실이어야 하며, 이메일 인증을 통해 계정의 유효성을 확인합니다.<br>
            - 만 14세 미만은 가입할 수 없습니다.<br>
            ⑶ 개인정보 보호<br>
            - 개인정보는 회원관리 및 서비스 제공 목적에 한해 수집, 이용됩니다.<br>
            - 회원은 언제든지 자신의 개인정보를 조회하고 수정할 수 있으며, 탈퇴 시 모든 개인정보는 즉시 삭제됩니다.<br>
            ⑷ 맞춤형 컨텐츠 제공:<br>
            - 회원이 작성한 리뷰 및 활동 기록에 기반하여 사용자 맞춤형 광고 및 컨텐츠가 제공될 수 있습니다.<br>
            - 이를 위해 회원의 서비스 사용 정보를 분석하여 맞춤형 정보를 제공합니다.<br>
            ⑸ 게시물 관리:<br>
            - 회원이 작성한 리뷰나 게시물은 타인의 권리를 침해해서는 안 되며, 관련 법령에 위반되는 내용은 삭제될 수 있습니다.<br>
            ⑹ 책임과 의무:<br>
            - 회원은 서비스 이용 중 발생하는 문제에 대해 법적 책임을 부담하며, 회사는 회원이 제공한 정보의 신뢰성에 대해 책임을 지지 않습니다.<br>
            ⑺ 회원 탈퇴 및 서비스 중단:<br>
            - 회원은 언제든지 탈퇴를 요청할 수 있으며, 탈퇴 시 관련된 모든 데이터는 삭제됩니다.<br>
            - 서비스 운영 중단 시, 회원에게 사전 공지를 통해 안내합니다.
          </p>
        </div>
        
        <label for="terms">3. 개인정보 수집 및 이용에 동의합니다.(필수)</label> 
        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" required>
        <div class="terms-container">
          <p id="short-text-2" class="terms-text" onclick="toggleText('short-text-2', 'full-text-2')">
            ⑴ 수집 목적: 회원가입 및 서비스 이용 시 회원 관리, 맞춤형 컨텐츠 제공...  [자세히보기]
          </p>
          <p id="full-text-2" class="terms-text" style="display: none;" onclick="toggleText('short-text-2', 'full-text-2')">
            ⑴ 수집 목적: 회원가입 및 서비스 이용 시 회원 관리, 맞춤형 컨텐츠 제공<br>
            ⑵ 수집 항목: 이메일 주소, 비밀번호, 성별, 닉네임<br>
            ⑶ 보유 및 이용 기간: 회원 탈퇴 시까지.<br>
            ⑷ 제3자 제공: 회원의 동의를 받은 경우에 한하여, 맞춤형 광고 제공 및 서비스 개선을 목적으로 제3자에게 일부 정보를 제공할 수 있습니다.<br>
            ⑸ 보안조치: 수집된 개인정보는 암호화하여 안전하게 저장됩니다.
          </p>
        </div>
      </div>

    <button type="submit" id="submitButton" class="btn btn-primary">가입하기</button>
    <a href="/" class="btn btn-sm btn-outline-success">메인으로</a>

</form>
</div>


{{>layouts/footer}}

//중복확인, 비밀번호 검사
<script>
    // 닉네임 중복 확인 버튼 활성화/비활성화
    const nicknameInput = document.getElementById('nickname');
    const nicknameCheckButton = document.getElementById('nicknameCheck');

    nicknameInput.addEventListener('input', function() {
        const firstChar = this.value.charAt(0);
        const isValid = this.value && /^[a-zA-Z0-9가-힣]/.test(firstChar); // 첫 글자가 빈칸, 특수문자, 한국어가 아닌지 체크
        nicknameCheckButton.disabled = !isValid; // 조건에 따라 비활성화
    });

    // 이메일 중복 확인 버튼 활성화/비활성화
    const emailInput = document.getElementById('email');
    const emailCheckButton = document.getElementById('emailCheck');

    emailInput.addEventListener('input', function() {
        emailCheckButton.disabled = !this.value; // 입력값이 없으면 비활성화
    });

    // 초기 상태에서 버튼 비활성화
    nicknameCheckButton.disabled = true; // 초기에는 비활성화
    emailCheckButton.disabled = true; // 초기에는 비활성화

    let nicknameCheckCount = 0; // 닉네임 중복확인 요청 카운트
    let emailCheckCount = 0; // 이메일 중복확인 요청 카운트

    // 닉네임 중복 확인
    document.getElementById('nicknameCheck').addEventListener('click', function() {
        if (nicknameCheckCount >= 20) {
            alert("닉네임 중복 확인 요청은 20번을 초과할 수 없습니다.");
            return; // 요청하지 않음
        }

        const nickname = document.getElementById('nickname').value;
        // AJAX 요청으로 닉네임 중복 확인
        fetch(`/api/checkNickname?nickname=${nickname}`)
            .then(response => response.json())
            .then(data => {
                const messageDiv = document.getElementById('nicknameMessage');
                if (data.exists) {
                    messageDiv.className = 'alert alert-danger';
                    messageDiv.textContent = '이미 등록된 닉네임입니다. 다른 닉네임으로 시도하세요.';
                } else {
                    messageDiv.className = 'alert alert-success';
                    messageDiv.textContent = '사용 가능한 닉네임입니다.';
                }
                messageDiv.style.display = 'block';
                nicknameCheckCount++; // 요청 카운트 증가
            })
            .catch(error => console.error('Error:', error));
    });

    // 이메일 중복 확인
    document.getElementById('emailCheck').addEventListener('click', function() {
        if (emailCheckCount >= 20) {
            alert("이메일 중복 확인 요청은 20번을 초과할 수 없습니다.");
            return; // 요청하지 않음
        }

        const email = document.getElementById('email').value;
        // AJAX 요청으로 이메일 중복 확인
        fetch(`/api/checkEmail?email=${email}`)
            .then(response => response.json())
            .then(data => {
                const messageDiv = document.getElementById('emailMessage');
                if (data.exists) {
                    messageDiv.className = 'alert alert-danger';
                    messageDiv.textContent = '이미 등록된 이메일입니다. 다른 이메일로 시도하세요.';
                    document.getElementById('emailVerify').style.display = 'none';
                } else {
                    messageDiv.className = 'alert alert-success';
                    messageDiv.textContent = '사용 가능한 이메일입니다.';
                    document.getElementById('emailVerify').style.display = 'inline';
                    // 인증 버튼 클릭 시 처리
                    document.getElementById('emailVerify').addEventListener('click', function() {
                      //인증코드 전송
                      alert("입력하신 이메일로 인증코드를 보냈습니다.");

                      fetch('/api/send-verification',{
                        method:'POST',
                        body:new URLSearchParams({email: email}),
                      }).then(()=>{
                        document.getElementById('authContainer').style.display = 'block';
                        startTimer();                        
                      });
                    });
                      
                }
                messageDiv.style.display = 'block';
                emailCheckCount++; // 요청 카운트 증가
            })
            .catch(error => console.error('Error:', error));
    });
    document.getElementById('confirmAuth').addEventListener('click',function(){
      const authCode = document.getElementById('authCode').value;
      const email = document.getElementById('email').value;

      fetch('/api/verify-code',{
        method: 'POST',
        body: new URLSearchParams({email: email, code: authCode})
      }).then(response => response.json()).then(data=>{
        const authMessage=document.getElementById('authOrNot');
        if(data){
          clearInterval(timer); // 타이머 멈추기
          authMessage.textContent = '인증되었습니다.';
          document.getElementById('confirmAuth').disabled = true; // 버튼 비활성화
        }else{
          authMessage.textContent='일치하지 않습니다.';
        }
      }).catch(error=>console.error('Error:',error));
    });

    // 가입하기 버튼 클릭 시 비밀번호와 필수 항목 검증
    document.getElementById('submitButton').addEventListener('click', function(event) {
      const nicknameMessage = document.getElementById('nicknameMessage');
      const emailMessage = document.getElementById('emailMessage');
      const authMessage = document.getElementById('authOrNot');
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const passwordLengthError = document.getElementById('passwordLengthError');
      const passwordCharacterError = document.getElementById('passwordCharacterError');
      const confirmPasswordError = document.getElementById('confirmPasswordError');
      const confirmPasswordSuccess = document.getElementById('confirmPasswordSuccess');
  
      // 비밀번호 길이와 문자 유효성 검사
      const isPasswordValid = password.length >= 5 && /\d/.test(password) && /[a-zA-Z]/.test(password);
      const isConfirmPasswordValid = password === confirmPassword;

      // 필수 항목 검사
      if (
          !nicknameMessage.classList.contains('alert-success') ||
          !emailMessage.classList.contains('alert-success') ||
          authMessage.textContent !== "인증되었습니다." ||
          !isPasswordValid ||
          !isConfirmPasswordValid
      ) {
          event.preventDefault(); // 요청을 막음
          alert("모든 필수 항목을 확인해주세요.\n- 닉네임 중복확인\n- 이메일 인증\n- 비밀번호 유효성 검사"); // 사용자에게 안내
          if (!isPasswordValid) {
              passwordLengthError.style.display = 'block';
              passwordCharacterError.style.display = 'block';
          }
          if (!isConfirmPasswordValid) {
              confirmPasswordError.style.display = 'block';
              confirmPasswordSuccess.style.display = 'none';
          }
      }
    });

    //인증 5분 타이머
    function startTimer() {
        let timeLeft = 300; // 5분
        const timerDisplay = document.getElementById('timer');
        const authContainer = document.getElementById('authContainer');
        authContainer.style.display = 'block';

        const timer = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            timeLeft--;

            if (timeLeft < 0) {
                clearInterval(timer);
                document.getElementById('confirmAuth').disabled = true;
                document.getElementById('confirmAuth').classList.remove('btn-success');
                document.getElementById('confirmAuth').classList.add('btn-secondary');
                document.getElementById('confirmAuth').textContent = '인증시간 만료';
            }
        }, 1000);
    }

    // 비밀번호 유효성 검사
    document.getElementById('password').addEventListener('input', function() {
        const password = this.value;
        const lengthError = document.getElementById('passwordLengthError');
        const characterError = document.getElementById('passwordCharacterError');

        lengthError.style.display = password.length < 5 ? 'block' : 'none';
        characterError.style.display = !(/\d/.test(password) && /[a-zA-Z]/.test(password)) ? 'block' : 'none';
    });

    // 비밀번호 확인 검사
    document.getElementById('confirmPassword').addEventListener('input', function() {
        const confirmPassword = this.value;
        const password = document.getElementById('password').value;
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        const confirmPasswordSuccess = document.getElementById('confirmPasswordSuccess');

        if (confirmPassword !== password) {
            confirmPasswordError.style.display = 'block';
            confirmPasswordSuccess.style.display = 'none';
        } else {
            confirmPasswordError.style.display = 'none';
            confirmPasswordSuccess.style.display = 'block';
        }
    });

</script>

//성별
<style>
    .gender-container {
      display: flex; /* Flexbox 사용 */
      justify-content: flex-start; /* 좌측 정렬 */
      gap: 2; /* 간격 작게 */
      margin-bottom: 15px; /* 아래쪽 여백 */
    }
  
    .gender-label {
      border: 1px solid #ccc; /* 테두리 */
      border-radius: 5px; /* 둥근 모서리 */
      width: 100px; /* 너비 설정 */
      text-align: center; /* 텍스트 가운데 정렬 */
      padding: 5px; /* 안쪽 여백 */
      cursor: pointer; /* 커서 변경 */
    }
  
    input[type="radio"] {
      display: none; /* 라디오 버튼 숨기기 */
    }
  
    input[type="radio"]:checked + .gender-label {
      background-color: #007bff; /* 선택된 경우 배경 색상 변경 */
      color: white; /* 선택된 경우 글자 색상 변경 */
    }
  </style>


//이용약관
<script>
    function toggleText(shortTextId, fullTextId) {
        var shortText = document.getElementById(shortTextId);
        var fullText = document.getElementById(fullTextId);
        if (fullText.style.display === "none") {
          fullText.style.display = "block";
          shortText.style.display = "none";
        } else {
          fullText.style.display = "none";
          shortText.style.display = "block";
        }
      }
  </script>
  <style>
    .terms-container {
      padding: 5px; /* padding 줄임 */
      border: 1px solid #ccc; /* 테두리 추가 */
      border-radius: 5px; /* 둥근 모서리 */
      width: 80.77%; /* 가로 크기를 3분의 2로 설정 */
      margin: 0 auto 15px auto; /* 위쪽 여백 0, 아래쪽 여백 15px, 좌우 가운데 정렬 */
    }
  
    .terms-text {
      padding: 5px; /* 안쪽 여백 줄임 */
      margin: 0; /* 기본 margin 제거 */
      font-size: 14px; /* 글자 크기 줄임_기본은 16px */
    }
  </style>