{{>layouts/header}}
<div class="container">
<br>
<h2>마이페이지</h2>
<br>
{{nickname}}님 환영합니다.<br><br>

<h4>리뷰시 선택한 키워드 분석</h4>
<!--키워드분석(워드클라우드)-->
<div id="container"></div>

<h4>내가 찜한 작품</h4>


<div class="recent-reviews">
    <h4>최근 리뷰한 작품</h4>  <a href="/user/mypage/myreview" class="btn btn-sm btn-info">전체 리뷰보기</a>
    <div class="article-list" id="article-list">
        <!-- Fetch된 데이터가 여기에 추가됩니다. -->
    </div>
</div>

<h4>추천 작품</h4>
<div id="recommendations"></div>

  

<script>
    const memberId = {{member_id}}; 
    console.log('Member ID:', memberId);

    // 워드클라우드 데이터 가져오기
    fetch(`/api/mypage/wordcloud/${memberId}`)
        .then(response => response.json())
        .then(wordCounts => {
            const wordCloudData = wordCounts.map(tag => ({ x: tag.tagName, value: tag.count }));
            
            anychart.onDocumentReady(function() {
                var chart = anychart.tagCloud(wordCloudData);
                chart.title("나의 키워드 분석");
                chart.angles([0, 45, 90, -45]);
                //chart.textDirection("vertical");
                chart.container("container");
                chart.draw();
            });
        });

    //최근 리뷰한 작품
    fetch(`/api/mypage/myreview/${memberId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            const articleList = document.getElementById('article-list');
            // 처음 5개 항목만 선택
            const limitedReviews = data.slice(0, 5);

            limitedReviews.forEach(articleReview => {
                // 새로운 div 생성
                const articleItem = document.createElement('div');
                articleItem.className = 'article-item';
                articleItem.setAttribute('data-score', articleReview.score);

                // HTML 구성
                articleItem.innerHTML = `
                    <a href="/articles/anime/${articleReview.articleId}">
                        <div class="score"></div> <!-- 별을 표시할 부분 -->
                        <img src="/images/pic/anime/${articleReview.main_pic}" alt="메인사진" class="main-pic">
                        <div class="title"><b>[${articleReview.genre}]${articleReview.title}</b></div>
                        <div class="score-reason">${articleReview.score_reason}</div>
                    </a>
                `;

                // article-item을 article-list에 추가
                articleList.appendChild(articleItem);
            });

            // 별 표시 함수 호출
            displayStars();
        })
        .catch(error => {
            console.error('Error fetching the data:', error);
        });
    


    function displayStars() {
        const articles = document.querySelectorAll('.article-item');

        articles.forEach(article => {
            const score = parseInt(article.getAttribute('data-score')); // data-score에서 점수 가져오기
            const starsContainer = article.querySelector('.score'); // 별을 표시할 요소 선택
            starsContainer.innerHTML = ''; // 기존 내용 삭제

            for (let i = 1; i <= 5; i++) {
                if (i <= score) {
                    starsContainer.innerHTML += '<span class="star">⭐</span>'; // 점수에 따라 채워진 별 추가
                } else {
                    starsContainer.innerHTML += '<span class="star">☆</span>'; // 점수가 미달일 경우 빈 별 추가
                }
            }
        });
    }

    // 추천 게시글 가져오기
    fetch(`/api/mypage/recommended-articles/${memberId}`)
        .then(response => response.json())
        .then(articles => {
            const recommendationsContainer = document.getElementById("recommendations");
            if (!Array.isArray(articles)) {
                articles = [articles]; // 단일 아티클도 배열로 변환
            }
            
            articles.forEach(article => {
                const articleDiv = document.createElement("div");
                articleDiv.className = "article";
                articleDiv.innerHTML = `
                    <div class="article-content">
                        <a href="/articles/anime/${article.id}">
                            <img src="/images/pic/anime/${article.main_pic}" width=150 alt="작품표지" class="article-image">
                        </a>
                        <div class="article-info">
                            <b>[${article.genre}] ${article.title}</b><br>
                            ${article.broad_date} | ${article.author} | ${article.ani_company}
                            <br>
                            <span>${article.story}</span>
                        </div>
                    </div>
                `;
                recommendationsContainer.appendChild(articleDiv);

                /*
                // 클릭 이벤트 추가(div전체 클릭가능)
                articleDiv.querySelector('.article-content').addEventListener('click', () => {
                    window.location.href = `/articles/anime/${article.id}`;
                });
                */
            });
            
        });

</script>

<style>
    /*내가 쓴 리뷰*/
   .recent-reviews {
        margin-top: 20px;
    }
    
    .article-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between; /* 각 아이템 간의 간격을 조절 */
    }
    
    .article-item {
        width: calc(20% - 10px); /* 5개 단위로 가로 배치, 간격을 고려 */
        margin-bottom: 20px; /* 세로 간격 */
        position: relative; /* 자식 요소의 절대 위치를 기준으로 설정 */
    }

    /* 모바일 화면에서 한 줄에 3개씩 보이도록 설정 */
    @media (max-width: 768px) {
        .article-item {
            width: calc(33.33% - 10px); /* 3개가 한 줄에 표시되도록 설정 (여백 고려) */
            /*width: calc(50% - 10px);  모바일에서는 2개씩 표시 */
        }
    }
    
    .main-pic {
        width: 100%; /* 전체 폭을 차지 */
        /*aspect-ratio: 7 / 5;  7:5 비율 */
        object-fit: cover; /* 비율 유지하며 이미지 잘림 방지 */
    }
    
    .title {
        display: inline-block; /* 내용을 감싸는 만큼만 너비 설정 */
        background-color: white; /* 흰색 배경 */
        color: black; /* 검정색 글자 */
        text-align: center; /* 중앙 정렬 */
        max-width: 100%; /* 최대 너비 설정 */
        white-space: nowrap; /* 줄 바꿈 방지 */
        overflow: hidden; /* 넘치는 텍스트 숨기기 */
        text-overflow: ellipsis; /* ... 표시 */
        text-align: center; /* 중앙 정렬 */
    }

    .score-reason {
        background-color: white; /* 흰색 배경 */
        color: black; /* 검정색 글자 */
        padding: 5px;
        overflow: hidden; /* 내용이 넘칠 경우 숨김 */
        text-overflow: ellipsis; /* ... 표시 */
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2; /* 2줄로 제한 */
    }
    
    .score {
        font-size: 1.6vw; /* 화면 너비의 5% 크기로 설정 */
        text-align: center; /* 중앙 정렬 */
    }
    /* 하이퍼링크의 밑줄 제거 */
    .article-item a {
        text-decoration: none; /* 기본 밑줄 제거 */
        color: inherit; /* 부모의 글자 색상 상속 */
    }

    /*추천 게시글*/
    .article-content {
        display: flex;
        margin-bottom: 20px; /* 각 게시글 간의 간격 */
    }
    
    .article-image {
        margin-right: 15px; /* 이미지와 텍스트 간의 간격 */
    }
    
    .article-info {
        flex: 1; /* 텍스트가 남은 공간을 차지하도록 설정 */
    }
    
    .article b {
        display: block; /* 제목을 블록으로 만들어 줄바꿈 가능하게 */
        margin-bottom: 5px; /* 제목과 내용 간의 간격 */
    }
</style>
{{>layouts/footer}}